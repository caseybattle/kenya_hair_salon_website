name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run ESLint
      run: npm run lint
      
    - name: Build application
      run: npm run build
      
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
      
    - name: Start application
      run: npm run start &
      env:
        PORT: 3000
        
    - name: Wait for application to be ready
      run: npx wait-on http://localhost:3000 --timeout 60000
      
    - name: Run E2E tests
      run: npm run test:e2e
      
    - name: Run accessibility tests
      run: npm run test:accessibility
      
    - name: Run performance tests
      run: npm run test:performance
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report-${{ matrix.node-version }}
        path: playwright-report/
        retention-days: 30

  lighthouse:
    name: Lighthouse CI
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Install Lighthouse CI
      run: npm install -g @lhci/cli@0.13.x
      
    - name: Start application
      run: npm run start &
      env:
        PORT: 3000
        
    - name: Wait for application
      run: npx wait-on http://localhost:3000 --timeout 60000
      
    - name: Run Lighthouse CI
      run: lhci autorun
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  visual-regression:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
      
    - name: Start application
      run: npm run start &
      env:
        PORT: 3000
        
    - name: Wait for application
      run: npx wait-on http://localhost:3000 --timeout 60000
      
    - name: Run visual regression tests
      run: npm run test:visual
      
    - name: Upload visual test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: visual-regression-report
        path: |
          playwright-report/
          test-results/
        retention-days: 30

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, lighthouse]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    # Add your deployment steps here
    # Example for Vercel:
    # - name: Deploy to Vercel
    #   uses: amondnet/vercel-action@v25
    #   with:
    #     vercel-token: ${{ secrets.VERCEL_TOKEN }}
    #     vercel-org-id: ${{ secrets.ORG_ID }}
    #     vercel-project-id: ${{ secrets.PROJECT_ID }}
    #     vercel-args: '--prod'
